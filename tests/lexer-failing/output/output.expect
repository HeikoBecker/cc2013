output.c:1:1: punctuator >
output.c:1:2: constant 1.25
output.c:1:6: identifier b
output.c:1:8: identifier printf
output.c:1:15: identifier z
output.c:1:16: punctuator ?
output.c:1:17: identifier b
output.c:1:19: identifier D
output.c:1:21: identifier h
output.c:1:22: punctuator ;
output.c:1:23: keyword _Imaginary
output.c:1:34: identifier H
output.c:1:36: keyword long
output.c:1:41: constant 13.5e+40
output.c:1:49: identifier O
output.c:1:51: keyword break
output.c:1:57: identifier Y
output.c:1:58: punctuator ;
output.c:2:1: keyword short
output.c:2:7: constant 10.
output.c:2:10: keyword _Complex
output.c:2:19: constant 0
output.c:2:20: string-literal "\v \' \" \? \\"
output.c:2:36: identifier p
output.c:2:38: keyword long
output.c:2:43: identifier a2
output.c:2:45: punctuator ;
output.c:2:46: keyword else
output.c:2:50: punctuator (
output.c:2:51: constant '\"'
output.c:2:55: punctuator ;
output.c:2:56: constant '\"'
output.c:2:60: keyword int
output.c:2:63: punctuator ;
output.c:2:64: identifier P
output.c:2:66: identifier a5
output.c:2:69: identifier printf
output.c:2:76: keyword _Complex
output.c:2:84: string-literal "Take one down and pass it around, %d %s of beer on the wall.\n"
output.c:2:148: keyword break
output.c:2:153: punctuator :
output.c:2:154: keyword void
output.c:2:159: identifier V
output.c:2:161: identifier W
output.c:2:163: keyword case
output.c:2:168: identifier printf
output.c:2:175: keyword break
output.c:2:181: identifier printf
output.c:2:187: string-literal "Go to the store and buy some more, 99 bottles of beer on the wall.\n"
output.c:2:257: identifier b
output.c:2:259: identifier Q
output.c:2:261: keyword int
output.c:2:264: punctuator ;
output.c:2:265: keyword double
output.c:2:272: identifier q
output.c:2:274: identifier E
output.c:2:275: punctuator --
output.c:2:277: punctuator -
output.c:2:278: identifier b
output.c:2:280: identifier l
output.c:3:2: keyword const
output.c:3:8: identifier a9
output.c:3:11: identifier B
output.c:3:13: identifier h
output.c:3:14: punctuator ;
output.c:3:15: identifier fully
output.c:3:20: punctuator ;
output.c:3:21: identifier B
output.c:3:22: punctuator ,
output.c:3:23: constant '\012'
output.c:3:29: punctuator ;
output.c:3:30: punctuator {
output.c:3:31: identifier j
output.c:3:32: punctuator =
output.c:3:33: string-literal "Take one down and pass it around, no more bottles of beer on the wall\n"
output.c:3:106: string-literal "String literal"
output.c:3:122: identifier Y
output.c:3:123: punctuator :
output.c:3:124: punctuator }
output.c:3:125: identifier B
output.c:3:126: string-literal "\012"
output.c:4:1: punctuator -
output.c:4:2: constant 99
output.c:4:4: identifier b
output.c:4:6: identifier P
output.c:4:7: punctuator ,
output.c:4:8: punctuator ;
output.c:4:9: keyword break
output.c:4:14: string-literal "No more bottles of beer on the wall, no more bottles of beer.\n"
output.c:4:79: identifier a5
output.c:4:82: identifier C
output.c:4:84: keyword typedef
output.c:4:92: keyword enum
output.c:4:97: constant 1E4
output.c:4:100: punctuator )
output.c:4:101: constant 100
output.c:4:104: identifier r
output.c:4:106: keyword int
output.c:4:110: identifier b
output.c:4:111: punctuator ;
output.c:4:112: keyword _Noreturn
output.c:4:121: punctuator (
output.c:4:122: identifier a9
output.c:4:124: punctuator ,
output.c:4:125: keyword enum
output.c:4:130: identifier a6
output.c:4:132: constant '\\'
output.c:4:136: identifier u
output.c:4:138: constant 100
output.c:4:141: identifier fully
output.c:4:147: identifier C
output.c:4:149: keyword unsigned
output.c:4:158: keyword unsigned
output.c:4:167: identifier n
output.c:4:169: identifier a6
output.c:4:172: keyword _Complex
output.c:4:180: constant '\x123'
output.c:4:187: punctuator ;
output.c:4:188: constant '\''
output.c:4:192: keyword break
output.c:4:198: keyword case
output.c:4:203: identifier j
output.c:4:204: string-literal "%d bottles of beer on the wall, %d bottles of beer.\n"
output.c:4:259: constant '\a'
output.c:4:263: identifier b
output.c:4:264: string-literal "auto"
output.c:4:270: punctuator )
output.c:4:271: identifier l
output.c:4:273: identifier h
output.c:4:275: keyword _Static_assert
output.c:4:290: identifier H
output.c:4:291: punctuator (
output.c:4:292: constant 12345
output.c:4:297: identifier a2
output.c:4:299: punctuator ,
output.c:4:300: keyword break
output.c:4:306: keyword break
output.c:4:311: string-literal "bottles"
output.c:4:320: identifier b
output.c:4:322: identifier autobreak
output.c:4:332: constant 0
output.c:5:1: identifier D
output.c:5:3: identifier C
output.c:5:4: punctuator )
output.c:5:5: punctuator )
output.c:5:6: keyword do
output.c:5:8: punctuator :
output.c:5:9: constant 3.5e+4
output.c:5:15: keyword while
output.c:5:20: punctuator :
output.c:5:21: keyword struct
output.c:5:28: keyword enum
output.c:5:32: constant '\b'
output.c:5:36: punctuator (
output.c:5:37: keyword static
output.c:5:44: identifier a2
output.c:5:47: identifier s
output.c:5:49: identifier E
output.c:6:1: constant '\x123'
output.c:6:8: punctuator }
output.c:6:9: punctuator {
output.c:6:10: constant 0.1
output.c:6:13: constant '\a'
output.c:6:17: keyword register
output.c:6:26: identifier z
output.c:6:27: punctuator =
output.c:6:28: constant '\v'
output.c:6:32: punctuator ;
output.c:6:33: constant 0
output.c:6:34: string-literal "Take one down and pass it around, no more bottles of beer on the wall\n"
output.c:6:107: constant 0
output.c:6:108: identifier M
output.c:6:110: keyword volatile
output.c:6:119: constant 1
output.c:6:120: keyword _Complex
output.c:6:129: identifier a9
output.c:6:132: identifier j
output.c:6:133: punctuator ;
output.c:6:134: identifier b
output.c:6:135: constant '\x123'
output.c:6:142: identifier b
output.c:6:143: string-literal "bottle"
output.c:7:1: constant '\''
output.c:7:5: punctuator }
output.c:7:6: constant 1
output.c:7:7: punctuator ;
output.c:7:8: identifier g
output.c:7:9: punctuator (
output.c:7:10: identifier R
output.c:7:11: punctuator ;
output.c:7:12: constant '\t'
output.c:7:16: identifier K
output.c:7:18: keyword case
output.c:7:23: keyword break
output.c:7:28: punctuator ;
output.c:8:1: constant 100
output.c:8:4: keyword do
output.c:8:7: identifier h
output.c:8:9: keyword continue
output.c:8:17: punctuator {
output.c:8:18: punctuator :
output.c:8:19: identifier b
output.c:8:21: keyword _Atomic
output.c:8:29: identifier t
output.c:8:31: keyword switch
output.c:8:37: punctuator -
output.c:8:38: keyword _Atomic
output.c:8:46: constant 0
output.c:8:47: punctuator (
output.c:8:48: string-literal "\n fully legal \x123. "
output.c:8:72: identifier y
output.c:8:73: punctuator ;
output.c:8:74: constant 0
output.c:8:75: keyword _Generic
output.c:8:84: constant 0
output.c:8:85: constant 3.5e+4
output.c:8:91: punctuator )
output.c:8:92: punctuator ,
output.c:8:93: string-literal "%d bottles of beer on the wall, %d bottles of beer.\n"
output.c:8:148: punctuator ;
output.c:8:149: identifier a0
output.c:8:152: keyword volatile
output.c:8:160: punctuator (
output.c:8:161: identifier b
output.c:8:163: identifier s
output.c:8:165: keyword case
output.c:8:170: identifier a5
output.c:8:173: constant 0
output.c:8:174: identifier U
output.c:8:176: identifier v
output.c:8:177: punctuator (
output.c:8:178: keyword case
output.c:8:183: keyword case
output.c:8:188: keyword char
output.c:8:193: keyword short
output.c:8:199: identifier r
output.c:8:201: identifier c
output.c:8:203: keyword double
output.c:8:210: identifier a9
output.c:8:212: constant '\x123'
output.c:8:219: identifier a2
output.c:8:222: identifier printf
output.c:8:228: punctuator :
output.c:8:229: punctuator )
output.c:8:230: keyword _Thread_local
output.c:8:243: string-literal "\v \' \" \? \\"
output.c:8:259: punctuator )
output.c:8:260: keyword case
output.c:8:264: punctuator ;
output.c:8:265: keyword struct
output.c:8:271: string-literal "Take one down and pass it around, %d %s of beer on the wall.\n"
output.c:8:335: identifier D
output.c:8:336: punctuator (
output.c:8:337: keyword enum
output.c:8:342: keyword _Alignof
output.c:8:351: identifier w
output.c:8:352: punctuator ;
output.c:8:353: identifier H
output.c:8:354: punctuator ;
output.c:8:355: punctuator ;
output.c:8:356: punctuator )
output.c:8:357: identifier legal
output.c:8:362: string-literal "\012"
output.c:8:368: keyword void
output.c:8:372: punctuator ;
output.c:8:373: identifier n
output.c:8:375: keyword _Noreturn
output.c:8:384: punctuator ;
output.c:8:385: keyword register
output.c:8:393: punctuator )
output.c:8:394: identifier fully
output.c:8:400: identifier a
output.c:8:401: constant '\t'
output.c:8:405: identifier aA
output.c:8:408: identifier a
output.c:8:409: punctuator (
output.c:8:410: punctuator (
output.c:8:411: identifier E
output.c:8:412: punctuator ;
output.c:8:413: keyword _Atomic
output.c:8:421: identifier j
output.c:8:423: constant 0
output.c:8:424: constant 1
output.c:8:425: keyword int
output.c:8:429: identifier j
output.c:8:430: punctuator =
output.c:8:431: constant 12345
output.c:8:436: keyword switch
output.c:8:443: keyword for
output.c:8:447: identifier u
output.c:8:448: punctuator )
output.c:8:449: constant '\b'
output.c:8:453: string-literal "escape the \" quote!"
output.c:8:475: keyword const
output.c:8:481: identifier M
output.c:8:483: identifier a1
output.c:8:486: keyword break
output.c:8:492: identifier a7
output.c:8:495: identifier i
output.c:8:497: constant 1
output.c:8:498: identifier u
output.c:8:499: punctuator ;
output.c:8:500: constant '\a'
output.c:8:504: punctuator (
output.c:8:505: keyword _Atomic
output.c:8:512: punctuator )
output.c:8:513: identifier b
output.c:8:515: keyword case
output.c:8:519: punctuator ;
output.c:8:520: punctuator (
output.c:8:521: punctuator (
output.c:8:522: punctuator ;
output.c:8:523: punctuator ;
output.c:8:524: identifier n
output.c:8:526: constant 0
output.c:8:527: keyword void
output.c:8:532: constant 10.
output.c:8:535: keyword break
output.c:8:541: keyword continue
output.c:8:550: keyword void
output.c:8:555: constant 1E4
output.c:8:558: punctuator {
output.c:8:559: keyword while
output.c:8:565: identifier P
output.c:8:567: keyword case
output.c:8:571: punctuator {
output.c:8:572: keyword break
output.c:8:578: keyword default
output.c:8:586: identifier g
output.c:8:587: constant '\v'
output.c:8:591: constant 0
output.c:8:592: identifier legal
output.c:8:597: string-literal "Take one down and pass it around, %d %s of beer on the wall.\n"
output.c:8:661: identifier n
output.c:8:663: keyword char
output.c:8:668: constant 10
output.c:8:671: constant 3.5e+4
output.c:8:677: identifier Bb2R1
output.c:8:682: punctuator )
output.c:8:683: identifier w
output.c:8:685: keyword _Static_assert
output.c:8:699: punctuator >=
output.c:8:701: identifier Z
output.c:8:702: punctuator (
output.c:8:703: string-literal "auto"
output.c:8:709: punctuator ;
output.c:8:710: identifier Y
output.c:8:712: keyword _Complex
output.c:8:720: constant '\?'
output.c:8:724: punctuator )
output.c:8:725: keyword return
output.c:8:732: constant 100
output.c:8:735: identifier n
output.c:8:736: punctuator >
output.c:8:737: identifier D
output.c:8:738: punctuator :
output.c:8:739: identifier c
output.c:8:741: identifier A
output.c:8:743: keyword default
output.c:8:751: identifier b
output.c:8:753: identifier a6
output.c:8:756: identifier q
output.c:8:758: keyword _Bool
output.c:8:764: identifier L
output.c:8:766: identifier X
output.c:8:768: keyword _Alignas
output.c:8:777: identifier C
output.c:8:779: keyword break
output.c:8:785: identifier Bb2R1
output.c:8:791: constant 1E4
output.c:8:794: identifier main
output.c:8:799: identifier b
output.c:8:801: identifier n
output.c:8:803: keyword register
output.c:8:812: keyword char
output.c:8:817: keyword else
output.c:8:822: constant 2.45E-2
output.c:8:829: punctuator ;
output.c:8:830: keyword return
output.c:8:836: punctuator )
output.c:8:837: keyword unsigned
output.c:8:846: identifier s
output.c:8:847: punctuator )
output.c:8:848: identifier r
output.c:8:849: punctuator {
output.c:8:850: identifier e
output.c:8:852: identifier t
output.c:8:854: constant 0
output.c:8:855: keyword _Alignof
output.c:8:863: punctuator {
output.c:8:864: keyword char
output.c:8:869: identifier E
output.c:8:870: punctuator ,
output.c:9:1: identifier fully
output.c:9:7: identifier x
output.c:9:9: identifier printf
output.c:9:15: punctuator :
output.c:9:16: identifier printf
output.c:9:23: constant 10.
output.c:9:26: string-literal "Take one down and pass it around, no more bottles of beer on the wall\n"
output.c:9:99: identifier z
output.c:9:101: identifier b
output.c:9:103: keyword enum
output.c:9:107: string-literal "Take one down and pass it around, %d %s of beer on the wall.\n"
output.c:9:171: identifier a8
output.c:9:173: string-literal "\a \b \f \n \r \t \v"
output.c:9:195: identifier printf
output.c:9:201: punctuator (
output.c:9:202: keyword _Generic
output.c:9:210: string-literal "Take one down and pass it around, %d %s of beer on the wall.\n"
output.c:9:274: constant 1
output.c:9:275: string-literal "\v \' \" \? \\"
output.c:9:291: identifier b
output.c:9:293: keyword goto
output.c:9:297: punctuator )
output.c:9:298: keyword default
output.c:9:306: identifier e
output.c:9:308: identifier r
output.c:9:309: punctuator :
output.c:9:310: keyword return
output.c:9:316: constant '\x123'
output.c:9:323: constant '\n'
output.c:9:327: keyword switch
output.c:9:334: keyword default
output.c:9:342: identifier b
output.c:9:343: string-literal "Take one down and pass it around, %d %s of beer on the wall.\n"
output.c:9:407: identifier S
output.c:9:409: identifier N
output.c:9:411: identifier a9
output.c:9:414: identifier legal
output.c:9:420: keyword long
output.c:9:425: keyword volatile
output.c:9:434: identifier a2
output.c:9:437: constant 0
output.c:9:438: constant 1
output.c:9:439: constant '\''
output.c:9:443: constant 0
output.c:9:444: keyword inline
output.c:9:451: keyword _Generic
output.c:9:459: constant '\a'
output.c:9:463: punctuator -
output.c:9:464: keyword static
output.c:9:471: keyword goto
output.c:9:476: identifier w
output.c:9:477: punctuator ;
output.c:9:478: constant 10.
output.c:9:481: identifier e
output.c:9:483: identifier a5
output.c:9:486: constant 99
output.c:9:488: string-literal "%d bottles of beer on the wall, %d bottles of beer.\n"
output.c:9:543: punctuator ,
output.c:9:544: constant 1
output.c:9:545: constant '\v'
output.c:9:549: keyword struct
output.c:9:556: identifier l
output.c:9:558: constant 12345
output.c:9:563: punctuator (
output.c:9:564: punctuator -
output.c:9:565: identifier printf
output.c:9:571: punctuator ;
output.c:9:572: keyword union
output.c:9:577: punctuator ;
output.c:9:578: punctuator ,
output.c:9:579: identifier b
output.c:9:580: punctuator ;
output.c:9:581: identifier b
output.c:9:582: punctuator >=
output.c:9:584: identifier u
output.c:9:586: keyword _Atomic
output.c:9:594: identifier Y
output.c:9:596: keyword const
output.c:9:602: keyword typedef
output.c:9:609: punctuator }
output.c:9:610: punctuator {
output.c:9:611: keyword int
output.c:9:615: identifier A
output.c:9:617: constant 0.0
output.c:9:620: string-literal "Take one down and pass it around, %d %s of beer on the wall.\n"
output.c:9:684: identifier printf
output.c:9:691: keyword _Atomic
output.c:9:698: constant '\n'
output.c:9:702: identifier legal
output.c:9:708: keyword sizeof
output.c:9:715: keyword _Generic
output.c:9:724: identifier printf
output.c:9:730: punctuator ,
output.c:9:731: keyword for
output.c:9:734: punctuator (
output.c:9:735: constant 10.
output.c:9:738: keyword continue
output.c:9:746: punctuator ;
output.c:9:747: constant 100
output.c:9:750: string-literal "%d bottles of beer on the wall, %d bottles of beer.\n"
output.c:9:805: identifier b
output.c:9:807: identifier b
output.c:9:809: keyword for
output.c:9:813: keyword goto
output.c:9:817: punctuator (
output.c:9:818: punctuator (
output.c:9:819: string-literal "bottle"
output.c:9:827: identifier O
output.c:9:829: identifier H
output.c:10:2: identifier printf
output.c:10:9: identifier b
output.c:10:11: constant 1
output.c:10:12: punctuator ;
output.c:10:13: identifier b
output.c:10:15: keyword _Generic
output.c:10:24: keyword inline
output.c:10:31: identifier J
output.c:10:32: punctuator ;
output.c:10:33: constant '\012'
output.c:10:39: punctuator (
output.c:10:40: identifier F
output.c:10:42: keyword restrict
output.c:10:50: punctuator ,
output.c:10:51: keyword return
output.c:10:58: identifier V
output.c:10:59: string-literal "bottles"
output.c:10:68: identifier b
output.c:10:70: identifier w
output.c:10:72: keyword float
output.c:10:78: keyword signed
output.c:10:85: identifier j
output.c:10:86: punctuator ,
output.c:10:87: string-literal "auto"
output.c:10:93: identifier j
output.c:10:95: identifier P
output.c:10:97: identifier P
output.c:10:99: identifier T
output.c:11:2: identifier y
output.c:11:4: identifier b
output.c:11:5: punctuator }
output.c:11:6: constant 10.
output.c:11:9: keyword while
output.c:11:15: identifier T
output.c:11:17: identifier V
output.c:11:19: identifier x
output.c:11:21: identifier printf
output.c:11:27: constant '\r'
output.c:11:31: string-literal "No more bottles of beer on the wall, no more bottles of beer.\n"
output.c:11:96: identifier B
output.c:11:97: punctuator )
output.c:11:98: identifier _
output.c:11:100: keyword inline
output.c:11:106: punctuator {
output.c:11:107: constant 0
output.c:11:108: keyword case
output.c:11:113: constant 12345
output.c:11:118: identifier U
output.c:11:119: punctuator --
output.c:11:121: punctuator ;
output.c:11:122: punctuator ;
output.c:11:123: string-literal "Take one down and pass it around, %d %s of beer on the wall.\n"
output.c:11:187: keyword double
output.c:11:194: identifier fully
output.c:11:199: punctuator :
output.c:11:200: punctuator )
output.c:11:201: constant 1
output.c:11:202: identifier printf
output.c:11:209: constant 0.11
output.c:11:213: string-literal "bottles"
output.c:11:222: keyword char
output.c:11:227: identifier Bb2R1
output.c:11:233: identifier e
output.c:11:235: identifier w
output.c:11:237: keyword _Generic
output.c:11:246: keyword default
output.c:11:253: punctuator >
output.c:11:254: constant 0
output.c:11:255: identifier b
output.c:11:257: keyword void
output.c:11:261: constant '\r'
output.c:11:265: punctuator }
output.c:11:266: identifier main
output.c:11:271: identifier O
output.c:11:272: punctuator {
output.c:11:273: identifier printf
output.c:11:280: identifier h
output.c:11:281: punctuator )
output.c:11:282: identifier r
output.c:11:284: identifier y
output.c:11:286: constant 0
output.c:11:287: identifier a
output.c:12:2: keyword while
output.c:12:8: keyword char
output.c:12:13: identifier u
output.c:12:15: keyword char
output.c:12:19: punctuator ;
output.c:12:20: keyword return
output.c:12:27: keyword for
output.c:12:31: identifier aA
output.c:12:33: string-literal "\012"
output.c:12:39: constant 0.1
output.c:12:42: keyword while
output.c:12:47: punctuator ;
output.c:12:48: identifier legal
output.c:12:54: keyword auto
output.c:12:58: punctuator )
output.c:12:59: punctuator (
output.c:12:60: keyword _Complex
output.c:12:68: punctuator )
output.c:12:69: constant '\v'
output.c:12:73: constant '\f'
output.c:12:77: identifier a4
output.c:12:80: identifier q
output.c:12:82: identifier X
output.c:12:83: punctuator >=
output.c:13:1: constant '\\'
output.c:13:5: punctuator -
output.c:13:6: identifier y
output.c:13:7: constant '\v'
output.c:13:11: string-literal "String literal"
output.c:13:27: identifier _
output.c:13:29: keyword break
output.c:13:35: constant 3.5e+4
output.c:13:41: punctuator (
output.c:13:42: punctuator ;
output.c:13:43: constant '\n'
output.c:13:47: string-literal "escape the \" quote!"
output.c:13:69: keyword goto
output.c:13:73: punctuator (
output.c:13:74: identifier R
output.c:13:76: identifier I
output.c:13:77: punctuator }
output.c:13:78: constant 0.1
output.c:13:81: punctuator )
output.c:13:82: identifier a2
output.c:13:84: constant '\f'
output.c:13:88: punctuator >
output.c:13:89: string-literal "Go to the store and buy some more, 99 bottles of beer on the wall.\n"
output.c:13:159: string-literal "String literal"
output.c:13:175: punctuator )
output.c:13:176: string-literal "\n fully legal \x123. "
output.c:13:200: keyword _Generic
output.c:13:209: identifier fully
output.c:13:214: punctuator (
output.c:13:215: punctuator ;
output.c:13:216: keyword while
output.c:13:221: punctuator ,
output.c:13:222: identifier r
output.c:13:224: identifier printf
output.c:13:230: constant '\n'
output.c:13:234: constant 1E4
output.c:13:237: identifier D
output.c:13:239: keyword struct
output.c:13:246: identifier k
output.c:13:248: keyword int
output.c:13:252: identifier fully
output.c:13:258: keyword break
output.c:13:264: identifier z
output.c:13:266: keyword break
output.c:13:272: constant 1
output.c:13:273: identifier Y
output.c:13:274: string-literal "\n fully legal \x123. "
output.c:13:298: string-literal "\012"
output.c:13:304: identifier I
output.c:13:305: constant '\n'
output.c:13:309: punctuator (
output.c:13:310: identifier I
output.c:13:311: punctuator ;
output.c:13:312: keyword char
output.c:13:317: constant 0
output.c:13:318: constant 0.10
output.c:13:322: keyword restrict
output.c:13:331: keyword case
output.c:13:335: punctuator ;
output.c:13:336: keyword register
output.c:13:344: constant '\012'
output.c:13:350: identifier D
output.c:13:351: constant '\v'
output.c:13:355: punctuator (
output.c:13:356: identifier c
output.c:13:358: identifier b
output.c:13:359: punctuator (
output.c:13:360: keyword do
output.c:13:363: keyword case
output.c:13:368: keyword break
output.c:13:373: punctuator :
output.c:13:374: punctuator ,
output.c:13:375: punctuator ;
output.c:13:376: identifier l
output.c:13:377: string-literal "Take one down and pass it around, no more bottles of beer on the wall\n"
output.c:13:450: keyword break
output.c:13:455: punctuator (
output.c:13:456: punctuator (
output.c:13:457: identifier D
output.c:13:459: constant 991
output.c:13:462: identifier r
output.c:13:463: string-literal "\012"
output.c:13:469: identifier p
output.c:13:471: identifier o
output.c:13:473: keyword _Noreturn
output.c:13:482: punctuator =
output.c:13:483: identifier H
output.c:13:484: punctuator (
output.c:13:485: punctuator ;
output.c:13:486: keyword _Thread_local
output.c:15:1: string-literal "%d bottles of beer on the wall, %d bottles of beer.\n"
output.c:15:56: identifier P
output.c:15:58: identifier p
output.c:15:60: identifier printf
output.c:15:67: identifier Z
output.c:15:68: constant '\012'
output.c:15:74: identifier printf
output.c:15:81: identifier X
output.c:15:83: constant 99
output.c:15:85: keyword for
output.c:15:89: identifier Bb2R1
output.c:15:95: constant 1
output.c:16:1: keyword _Alignas
output.c:16:10: keyword short
output.c:16:16: identifier printf
output.c:16:23: identifier k
output.c:16:25: identifier a2
output.c:16:28: identifier a5
output.c:16:31: keyword default
output.c:16:39: constant 0.
output.c:16:41: keyword register
output.c:16:50: keyword const
output.c:16:56: keyword signed
output.c:16:63: keyword auto
output.c:16:67: punctuator )
output.c:16:68: identifier a4
output.c:16:70: punctuator (
output.c:16:71: identifier a3
output.c:16:73: punctuator ;
output.c:16:74: punctuator ;
output.c:16:75: punctuator ;
output.c:16:76: identifier r
output.c:16:78: identifier b
output.c:16:80: identifier printf
output.c:16:87: identifier k
output.c:16:89: identifier b
output.c:16:90: punctuator (
output.c:16:91: constant 1
output.c:16:92: identifier o
output.c:16:94: keyword _Alignof
output.c:16:103: identifier printf
output.c:16:110: keyword auto
output.c:16:115: identifier b
output.c:16:116: punctuator )
output.c:16:117: identifier aA
output.c:16:120: keyword extern
output.c:16:127: constant 1E4
output.c:16:130: identifier f
output.c:16:132: identifier b
output.c:16:133: constant '\012'
output.c:16:139: identifier b
output.c:16:141: identifier Y
output.c:16:142: constant '\b'
output.c:16:146: constant 1
output.c:16:147: identifier I
output.c:16:149: identifier u
output.c:16:150: string-literal "Take one down and pass it around, %d %s of beer on the wall.\n"
output.c:16:214: keyword struct
output.c:16:221: keyword inline
output.c:16:227: punctuator :
output.c:16:228: identifier o
output.c:16:229: constant '\n'
output.c:16:233: punctuator (
output.c:16:234: punctuator =
output.c:17:1: punctuator :
output.c:17:2: identifier a5
output.c:17:5: keyword break
output.c:17:11: keyword float
output.c:17:16: constant '\r'
output.c:17:20: keyword const
output.c:17:26: identifier k
output.c:17:28: identifier c
output.c:17:29: string-literal "\n fully legal \x123. "
output.c:17:53: keyword unsigned
output.c:17:61: punctuator }
output.c:17:62: punctuator -
output.c:17:63: punctuator (
output.c:17:64: keyword int
output.c:17:67: punctuator ;
output.c:17:68: punctuator :>
output.c:17:70: punctuator =
output.c:17:71: keyword char
output.c:17:76: identifier G
output.c:17:77: constant '\x123'
output.c:17:84: string-literal "1 bottle of beer on the wall, 1 bottle of beer.\n"
output.c:17:135: keyword unsigned
output.c:17:144: identifier printf
output.c:17:151: keyword short
output.c:17:157: identifier E
output.c:17:159: keyword enum
output.c:17:164: constant 10.
output.c:17:167: identifier e
output.c:17:168: string-literal "escape the \" quote!"
output.c:17:190: identifier b
output.c:17:191: string-literal "bottles"
output.c:17:200: punctuator ,
output.c:17:201: constant '\v'
output.c:17:205: identifier k
output.c:17:206: punctuator )
output.c:17:207: identifier b
output.c:17:208: constant '\n'
output.c:17:212: keyword default
output.c:17:220: keyword struct
output.c:17:226: constant '\v'
output.c:17:230: identifier b
output.c:17:232: keyword return
output.c:17:239: identifier fully
output.c:17:244: punctuator {
output.c:17:245: identifier a
output.c:17:247: constant 1
output.c:17:248: string-literal "auto"
output.c:17:254: identifier Z
output.c:17:255: punctuator ,
output.c:17:256: constant '\''
output.c:17:260: identifier Y
output.c:17:261: punctuator ?
output.c:17:262: punctuator ;
output.c:17:263: keyword extern
output.c:17:270: keyword _Complex
output.c:17:278: constant '\?'
output.c:17:282: constant 12345
output.c:17:287: identifier a8
output.c:17:290: keyword default
output.c:17:298: identifier U
output.c:17:299: string-literal "No more bottles of beer on the wall, no more bottles of beer.\n"
output.c:17:364: string-literal "%d bottles of beer on the wall, %d bottles of beer.\n"
output.c:17:419: identifier b
output.c:17:421: identifier Y
output.c:17:423: keyword if
output.c:17:425: punctuator =
output.c:17:426: punctuator ;
output.c:17:427: punctuator >
output.c:17:428: punctuator ;
output.c:17:429: identifier a9
output.c:17:432: constant 2.45E-2
output.c:17:439: identifier e
output.c:17:441: identifier b
output.c:17:443: identifier q
output.c:17:445: identifier K
output.c:17:446: punctuator (
output.c:17:447: punctuator )
output.c:17:448: keyword for
output.c:18:2: keyword sizeof
output.c:18:9: constant 1
output.c:18:10: identifier k
output.c:18:12: identifier v
output.c:18:13: punctuator ;
output.c:18:14: identifier t
output.c:18:16: keyword break
output.c:18:22: constant 0.1
output.c:18:25: string-literal "No more bottles of beer on the wall, no more bottles of beer.\n"
output.c:18:90: identifier h
output.c:18:91: constant '\a'
output.c:18:95: keyword int
output.c:18:98: punctuator -
output.c:18:99: identifier h
output.c:18:100: punctuator ;
output.c:19:1: constant 2.45E-2
output.c:19:8: string-literal "bottles"
output.c:19:17: constant 10.
output.c:19:20: constant '\f'
output.c:19:24: identifier w
output.c:19:25: string-literal "Take one down and pass it around, no more bottles of beer on the wall\n"
output.c:19:98: identifier a2
output.c:19:100: constant '\r'
output.c:19:104: identifier N
output.c:19:105: constant '\"'
output.c:19:109: identifier fully
output.c:19:114: punctuator ;
output.c:19:115: constant 2.45E-2
output.c:19:122: punctuator ,
output.c:19:123: identifier a4
output.c:20:2: identifier B
output.c:21:2: keyword int
output.c:21:6: identifier E
output.c:21:8: identifier R
output.c:21:10: identifier a9
output.c:21:12: punctuator -
output.c:21:13: constant '\b'
output.c:21:17: constant 10.
output.c:21:20: identifier printf
output.c:21:26: punctuator ;
output.c:21:27: string-literal "No more bottles of beer on the wall, no more bottles of beer.\n"
output.c:21:92: constant 1E4
output.c:21:95: punctuator )
output.c:21:96: string-literal "\n fully legal \x123. "
output.c:21:120: punctuator (
output.c:21:121: keyword extern
output.c:21:127: constant '\v'
output.c:21:131: keyword for
output.c:21:134: punctuator ;
output.c:21:135: identifier i
output.c:21:137: constant 0
output.c:21:138: constant 1
output.c:21:139: identifier s
output.c:21:141: keyword _Alignof
output.c:21:150: constant 1
output.c:21:151: identifier P
output.c:21:153: identifier a
output.c:21:155: identifier G
output.c:21:157: identifier printf
output.c:21:163: punctuator ;
output.c:21:164: keyword auto
output.c:21:168: punctuator --
output.c:21:170: identifier b
output.c:21:172: constant 0
output.c:21:173: identifier E
output.c:21:175: keyword register
output.c:21:184: keyword auto
output.c:21:189: keyword register
output.c:21:197: punctuator ;
output.c:21:198: identifier b
output.c:21:200: keyword goto
output.c:21:205: constant 0
output.c:21:206: punctuator }
output.c:21:207: keyword static
output.c:21:214: identifier a1
output.c:21:217: keyword for
output.c:21:221: identifier l
output.c:21:222: punctuator :
output.c:21:223: identifier W
output.c:21:224: punctuator )
output.c:21:225: identifier F
output.c:21:226: string-literal "Go to the store and buy some more, 99 bottles of beer on the wall.\n"
output.c:21:296: keyword _Static_assert
output.c:21:310: string-literal "Take one down and pass it around, %d %s of beer on the wall.\n"
output.c:21:374: keyword _Alignas
output.c:21:383: keyword _Alignas
output.c:21:392: identifier K
output.c:21:394: identifier F
output.c:21:396: identifier a3
output.c:21:399: constant 0
output.c:21:400: keyword union
output.c:21:406: identifier z
output.c:21:407: constant '\b'
output.c:21:411: identifier U
output.c:21:413: identifier L
output.c:21:414: constant '\r'
output.c:21:418: constant 1.25
output.c:21:422: punctuator (
output.c:21:423: punctuator ;
output.c:21:424: constant '\?'
output.c:21:428: keyword goto
output.c:21:432: string-literal "escape the \" quote!"
output.c:21:454: identifier C
output.c:21:456: constant 2.45E-2
output.c:21:463: punctuator (
output.c:21:464: string-literal "\a \b \f \n \r \t \v"
output.c:21:486: punctuator }
output.c:21:487: constant 12345
output.c:21:492: identifier printf
output.c:21:499: constant 3.5e+4
output.c:21:505: constant '\v'
output.c:21:509: punctuator ;
output.c:21:510: identifier printf
output.c:21:517: keyword restrict
output.c:21:526: identifier f
output.c:21:527: punctuator )
output.c:21:528: identifier a7
output.c:21:531: keyword int
output.c:21:535: keyword void
output.c:21:539: punctuator ,
output.c:21:540: string-literal "No more bottles of beer on the wall, no more bottles of beer.\n"
output.c:21:605: identifier a8
output.c:21:607: string-literal "escape the \" quote!"
output.c:21:629: keyword case
output.c:21:634: keyword case
output.c:21:639: identifier _
output.c:21:641: keyword struct
output.c:21:648: identifier printf
output.c:21:655: keyword float
output.c:21:661: identifier a3
output.c:21:664: constant 0
output.c:21:665: keyword else
output.c:21:669: punctuator (
